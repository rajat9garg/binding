openapi: 3.0.3
info:
  title: Bidding Platform API
  description: API for the online bidding platform
  version: 1.0.0

servers:
  - url: /api/v1
    description: Development server

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Returns the health status of the application
      operationId: healthCheck
      tags:
        - Health
      responses:
        '200':
          description: Application is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /users/register:
    post:
      summary: Register a new user
      description: Register a new user with phone number and name
      operationId: registerUser
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid input data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /items:
    get:
      tags: [Items]
      summary: Search items
      operationId: searchItems
      description: Search and filter auction items with pagination
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/statusFilter'
        - $ref: '#/components/parameters/minPriceFilter'
        - $ref: '#/components/parameters/maxPriceFilter'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemPageResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

    post:
      tags: [Items]
      summary: Create a new item
      operationId: createItem
      description: Create a new auction item listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateItemRequest'
      responses:
        '201':
          description: Item created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /items/{id}:
    parameters:
      - $ref: '#/components/parameters/itemId'
    get:
      tags: [Items]
      summary: Get item by ID
      operationId: getItem
      description: Retrieve an item by its unique identifier
      responses:
        '200':
          description: Item found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '404':
          $ref: '#/components/responses/NotFound'

    put:
      tags: [Items]
      summary: Update an item
      operationId: updateItem
      description: Update an existing item listing
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateItemRequest'
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'

components:
  parameters:
    itemId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int64
    page:
      name: page
      in: query
      description: Page number (0-based)
      required: false
      schema:
        type: integer
        default: 0
        minimum: 0
    size:
      name: size
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 20
        minimum: 1
        maximum: 100
    statusFilter:
      name: status
      in: query
      description: Filter items by status
      required: false
      schema:
        type: string
        enum: [DRAFT, UPCOMING, ONGOING, ENDED, CANCELLED]
    minPriceFilter:
      name: minPrice
      in: query
      description: Minimum price filter
      required: false
      schema:
        type: number
        format: decimal
    maxPriceFilter:
      name: maxPrice
      in: query
      description: Maximum price filter
      required: false
      schema:
        type: number
        format: decimal

  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          enum: [UP, DOWN]
        timestamp:
          type: string
          format: date-time

    UserRegistrationRequest:
      type: object
      required:
        - name
        - phoneNumber
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        phoneNumber:
          type: string
          pattern: '^[+]?[0-9]{10,15}$'

    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        phoneNumber:
          type: string
        createdAt:
          type: string
          format: date-time

    ItemResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
          maxLength: 200
        description:
          type: string
        basePrice:
          type: number
          format: decimal
        currentBid:
          type: number
          format: decimal
        status:
          type: string
          enum: [DRAFT, UPCOMING, ONGOING, ENDED, CANCELLED]
        auctionStartTime:
          type: string
          format: date-time
        auctionEndTime:
          type: string
          format: date-time
        images:
          type: array
          items:
            $ref: '#/components/schemas/ItemImage'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        version:
          type: integer
          format: int64
        createdBy:
          type: integer
          format: int64

    ItemImage:
      type: object
      properties:
        id:
          type: integer
          format: int64
        imageUrl:
          type: string
        isPrimary:
          type: boolean
        displayOrder:
          type: integer

    CreateItemRequest:
      type: object
      required:
        - name
        - basePrice
        - auctionStartTime
        - auctionEndTime
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
        basePrice:
          type: number
          format: decimal
          minimum: 0
        auctionStartTime:
          type: string
          format: date-time
        auctionEndTime:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string
            format: uri

    UpdateItemRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 200
        description:
          type: string
        status:
          type: string
          enum: [DRAFT, UPCOMING, CANCELLED]
        auctionStartTime:
          type: string
          format: date-time
        auctionEndTime:
          type: string
          format: date-time
        images:
          type: array
          items:
            type: string
            format: uri

    ItemPageResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ItemResponse'
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        last:
          type: boolean

    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string
        timestamp:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Invalid request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Operation not allowed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'